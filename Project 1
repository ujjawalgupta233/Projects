#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <algorithm> // For remove_if

using namespace std;

class Item {
public:
    string name;
    int quantity;
    double price;

    Item() : name(""), quantity(0), price(0.0) {}
    Item(const string& name, int quantity, double price) : name(name), quantity(quantity), price(price) {}

    void display() const {
        cout << "Name: " << name << ", Quantity: " << quantity << ", Price: " << price << endl;
    }
};

class Inventory {
private:
    vector<Item> items;
    string filename;

    void loadFromFile() {
        ifstream file(filename);
        if (!file) {
            cerr << "Error opening file for reading." << endl;
            return;
        }
        string name;
        int quantity;
        double price;
        while (getline(file, name, ',') && file >> quantity >> ws && file >> price) {
            items.emplace_back(name, quantity, price);
            file.ignore(numeric_limits<streamsize>::max(), '\n'); // Skip to next line
        }
        file.close();
    }

    void saveToFile() const {
        ofstream file(filename);
        if (!file) {
            cerr << "Error opening file for writing." << endl;
            return;
        }
        for (const auto& item : items) {
            file << item.name << ',' << item.quantity << ',' << item.price << endl;
        }
        file.close();
    }

public:
    explicit Inventory(const string& filename) : filename(filename) {
        loadFromFile();
    }

    ~Inventory() {
        saveToFile();
    }

    void addItem(const Item& item) {
        items.push_back(item);
        cout << "Item added." << endl;
    }

    void viewItems() const {
        if (items.empty()) {
            cout << "Inventory is empty." << endl;
            return;
        }
        for (const auto& item : items) {
            item.display();
        }
    }

    void deleteItem(const string& name) {
        auto it = remove_if(items.begin(), items.end(), [&name](const Item& item) {
            return item.name == name;
        });

        if (it != items.end()) {
            items.erase(it, items.end());
            cout << "Item deleted." << endl;
        } else {
            cout << "Item not found." << endl;
        }
    }

    void updateItem(const string& name, int quantity, double price) {
        for (auto& item : items) {
            if (item.name == name) {
                item.quantity = quantity;
                item.price = price;
                cout << "Item updated." << endl;
                return;
            }
        }
        cout << "Item not found." << endl;
    }
};

void displayMenu() {
    cout << "\nInventory Management System" << endl;
    cout << "1. Add Item" << endl;
    cout << "2. View Items" << endl;
    cout << "3. Delete Item" << endl;
    cout << "4. Update Item" << endl;
    cout << "5. Exit" << endl;
    cout << "Enter your choice: ";
}

int main() {
    Inventory inventory("inventory.txt");
    int choice;
    string name;
    int quantity;
    double price;

    do {
        displayMenu();
        cin >> choice;
        cin.ignore(); // Ignore leftover newline

        switch (choice) {
            case 1:
                cout << "Enter item name: ";
                getline(cin, name);
                cout << "Enter item quantity: ";
                cin >> quantity;
                cout << "Enter item price: ";
                cin >> price;
                cin.ignore(); // Ignore leftover newline
                inventory.addItem(Item(name, quantity, price));
                break;

            case 2:
                inventory.viewItems();
                break;

            case 3:
                cout << "Enter item name to delete: ";
                getline(cin, name);
                inventory.deleteItem(name);
                break;

            case 4:
                cout << "Enter item name to update: ";
                getline(cin, name);
                cout << "Enter new quantity: ";
                cin >> quantity;
                cout << "Enter new price: ";
                cin >> price;
                cin.ignore(); // Ignore leftover newline
                inventory.updateItem(name, quantity, price);
                break;

            case 5:
                cout << "Exiting the program." << endl;
                break;

            default:
                cout << "Invalid choice. Please try again." << endl;
                break;
        }

    } while (choice != 5);

    return 0;
}
